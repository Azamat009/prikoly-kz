<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <title>–ü—Ä–∏–∫–æ–ª—ã KZ</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html, body {
            height: 100%;
            overflow: hidden;
            background: #000;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            color: #fff;
        }

        #video-feed {
            height: 100vh;
            width: 100%;
            overflow-y: scroll;
            scroll-snap-type: y mandatory;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
        }

        .video-container {
            height: 100vh;
            width: 100%;
            position: relative;
            scroll-snap-align: start;
        }

        video {
            position: absolute;
            width: 100%;
            height: 100%;
            object-fit: cover;
            background: #000;
        }

        .video-info {
            position: absolute;
            bottom: 80px;
            left: 12px;
            max-width: 70%;
            z-index: 10;
        }

        .video-title {
            font-size: 18px;
            margin-bottom: 8px;
            text-shadow: 0 1px 2px rgba(0,0,0,0.5);
        }

        .loading {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            z-index: 100;
        }

        .video-actions {
            position: absolute;
            right: 15px;
            bottom: 100px;
            display: flex;
            flex-direction: column;
            align-items: center;
            z-index: 10;
            gap: 20px;
        }

        .action-button {
            background: rgba(0, 0, 0, 0.5);
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            font-size: 24px;
            transition: all 0.3s;
            backdrop-filter: blur(10px);
        }

        .action-button:hover {
            transform: scale(1.1);
            background: rgba(255, 255, 255, 0.2);
        }

        .action-label {
            font-size: 12px;
            margin-top: 5px;
            text-align: center;
            text-shadow: 0 1px 2px rgba(0,0,0,0.5);
        }

        .share-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s;
        }

        .share-modal.active {
            opacity: 1;
            pointer-events: all;
        }

        .share-content {
            background: #1e1e1e;
            border-radius: 15px;
            padding: 25px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }

        .share-title {
            font-size: 20px;
            margin-bottom: 20px;
            text-align: center;
        }

        .share-options {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 25px;
        }

        .share-option {
            display: flex;
            flex-direction: column;
            align-items: center;
            cursor: pointer;
            transition: transform 0.3s;
        }

        .share-option:hover {
            transform: scale(1.1);
        }

        .share-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 30px;
            margin-bottom: 10px;
        }

        .copy-link {
            display: flex;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 10px;
        }

        .copy-link input {
            flex: 1;
            padding: 12px 15px;
            border: none;
            background: transparent;
            color: white;
            font-size: 16px;
        }

        .copy-link button {
            padding: 0 15px;
            border: none;
            background: #ff0050;
            color: white;
            cursor: pointer;
            font-weight: bold;
        }

        .close-share {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 30px;
            color: white;
            background: none;
            border: none;
            cursor: pointer;
        }

        /* –°–∫—Ä—ã—Ç—å —Å–∫—Ä–æ–ª–ª–±–∞—Ä */
        #video-feed::-webkit-scrollbar {
            display: none;
        }
        #video-feed {
            -ms-overflow-style: none;
            scrollbar-width: none;
        }
    </style>
</head>
<body>
<main id="video-feed"></main>
<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>

<div class="share-modal">
    <button class="close-share">√ó</button>
    <div class="share-content">
        <h2 class="share-title">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∏–¥–µ–æ</h2>
        <div class="share-options">
            <div class="share-option" data-share="whatsapp">
                <div class="share-icon" style="background: #25D366;">
                    <span>üì±</span>
                </div>
                <span>WhatsApp</span>
            </div>
            <div class="share-option" data-share="telegram">
                <div class="share-icon" style="background: #0088cc;">
                    <span>‚úàÔ∏è</span>
                </div>
                <span>Telegram</span>
            </div>
            <div class="share-option" data-share="copy">
                <div class="share-icon" style="background: #555;">
                    <span>üìã</span>
                </div>
                <span>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
            </div>
        </div>
        <div class="copy-link">
            <input type="text" id="share-url" readonly>
            <button id="copy-button">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const videoFeed = document.getElementById('video-feed');
        const loadingIndicator = document.querySelector('.loading');
        let currentPage = 1;
        let isLoading = false;
        let videosLoaded = false;
        const shareModal = document.querySelector('.share-modal');
        const closeShare = document.querySelector('.close-share');
        const shareUrlInput = document.getElementById('share-url');
        const copyButton = document.getElementById('copy-button');
        const shareOptions = document.querySelectorAll('.share-option');

        function createVideoElement(video) {
            const container = document.createElement('div');
            container.className = 'video-container';

            const videoEl = document.createElement('video');
            videoEl.playsInline = true;
            videoEl.muted = true;
            videoEl.autoplay = true;
            videoEl.loop = true;
            videoEl.src = video.filePath;

            const infoDiv = document.createElement('div');
            infoDiv.className = 'video-info';
            infoDiv.innerHTML = `<h3 class="video-title">${video.title}</h3>`;

            const shareButton = document.createElement('button');
            shareButton.className = 'action-button';
            shareButton.innerHTML = '‚ÜóÔ∏è';
            shareButton.title = '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è';
            shareButton.addEventListener('click', (e) => {
                e.stopPropagation();
                openShareModal(video.id, video.title);
            });

            const actionsDiv = document.createElement('div');
            actionsDiv.className = 'video-actions';

            actionsDiv.innerHTML = `
                    <div class="action-item">
                        <button class="action-button share-btn">‚ÜóÔ∏è</button>
                        <span class="action-label">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</span>
                    </div>`;

            actionsDiv.querySelector('.share-btn').addEventListener('click', (e) => {
                e.stopPropagation();
                openShareModal(video.id, video.title);
            });

            container.appendChild(videoEl);
            container.appendChild(infoDiv);
            container.appendChild(actionsDiv);

            videoEl.addEventListener('click', () => {
                videoEl.muted = !videoEl.muted;
            });

            return container;
        }

        function openShareModal(videoId, title){
            currentVideoId = videoId;
            let videoUrl;
            videoUrl = `${window.location.origin}/?video=${videoId}`;
            shareUrlInput.value = videoUrl;
            shareModal.classList.add('active');
        }

        closeShare.addEventListener('click', () =>{
            shareModal.classList.remove('active');
        });

        copyButton.addEventListener('click', () => {
            shareUrlInput.select();
            document.execCommand('copy');

            const originalText = copyButton.textContent;
            copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
            setTimeout(() => {
                copyButton.textContent = originalText;
            }, 2000);
        });

        shareOptions.forEach(option => {
            option.addEventListener('click', () => {
                const type = option.dataset.share;
                const url = shareUrlInput.value;
                const title = '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ –≤–∏–¥–µ–æ!';

                switch (type) {
                    case 'whatsapp':
                        window.open(`https://api.whatsapp.com/send?text=${encodeURIComponent(title + ' ' + url)}`, '_blank');
                        break;
                    case 'telegram':
                        window.open(`https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`, '_blank');
                        break;
                    case 'copy':
                        shareUrlInput.select();
                        document.execCommand('copy');

                        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        const originalText = copyButton.textContent;
                        copyButton.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                        setTimeout(() => {
                            copyButton.textContent = originalText;
                        }, 2000);
                        break;
                }

                // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                setTimeout(() => {
                    shareModal.classList.remove('active');
                }, 500);
            });
        });

        async function loadVideos() {
            if (isLoading) return;
            isLoading = true;
            loadingIndicator.style.display = 'block';

            try {
                const response = await fetch(`/api/videos?page=${currentPage}`);
                const data = await response.json();

                if (data.videos.length > 0) {
                    data.videos.forEach(video => {
                        const videoElement = createVideoElement(video);
                        videoFeed.appendChild(videoElement);

                        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                        videoElement.querySelector('video').play().catch(e => {
                            console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:', e);
                        });
                    });

                    videosLoaded = true;
                    currentPage = data.nextPage || currentPage;
                } else if (currentPage === 1) {
                    // –ù–µ—Ç –≤–∏–¥–µ–æ –≤–æ–æ–±—â–µ
                    loadingIndicator.textContent = '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
                loadingIndicator.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ';
            } finally {
                isLoading = false;
                loadingIndicator.style.display = 'none';
            }
        }

        function handleScroll() {
            if (isLoading || !videosLoaded) return;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const scrollBottom = videoFeed.scrollHeight - videoFeed.scrollTop - videoFeed.clientHeight;
            if (scrollBottom < 100) {
                loadVideos();
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        videoFeed.addEventListener('scroll', handleScroll);
        loadVideos();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let lastTouchY = 0;
        let touchStartY = 0;
        let isScrolling = false;

        videoFeed.addEventListener('touchstart', e => {
            touchStartY = e.touches[0].clientY;
            lastTouchY = touchStartY;
            isScrolling = true;
        }, { passive: true });

        videoFeed.addEventListener('touchmove', e => {
            if (!isScrolling) return;
            const currentY = e.touches[0].clientY;
            const deltaY = currentY - lastTouchY;
            lastTouchY = currentY;

            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é
            videoFeed.scrollTop -= deltaY;
        }, { passive: true });

        videoFeed.addEventListener('touchend', e => {
            isScrolling = false;
            const touchEndY = e.changedTouches[0].clientY;
            const diff = touchStartY - touchEndY;

            // –ë—ã—Å—Ç—Ä—ã–π —Å–≤–∞–π–ø –≤–Ω–∏–∑
            if (diff > 50) {
                handleScroll();
            }
        }, { passive: true });

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const video = entry.target.querySelector('video');
                    if (video) {
                        video.play().catch(e => console.log('Play error:', e));
                    }
                } else {
                    const video = entry.target.querySelector('video');
                    if (video) {
                        video.pause();
                    }
                }
            });
        }, { threshold: 0.5 });

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –≤–∏–¥–µ–æ-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
        document.querySelectorAll('.video-container').forEach(container => {
            observer.observe(container);
        });
    });
</script>
</body>
</html>